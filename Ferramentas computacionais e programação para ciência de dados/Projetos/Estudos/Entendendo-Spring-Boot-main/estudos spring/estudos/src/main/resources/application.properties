# Nome da aplicação Spring Boot
spring.application.name=estudos

# ===============================

# Configuração do servidor de banco de dados

# URL de conexão com o banco de dados PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/estudos
    # jdbc:postgresql:// - Indica que o banco de dados utilizado é o PostgreSQL
    # localhost - Indica que o banco de dados está rodando na mesma máquina que a aplicação
    # 5432 - Porta padrão onde o PostgreSQL está escutando
    # /estudos - Nome do banco de dados que a aplicação irá utilizar

# ===============================

# Configuração do usuário e senha para acessar o banco de dados, limita o acesso ao banco de dados

spring.datasource.username=user
    # Nome de usuário para acessar o banco de dados
spring.datasource.password=123
    # Senha para acessar o banco de dados

# ===============================

# Driver JDBC para o PostgreSQL

spring.datasource.driver-class-name=org.postgresql.Driver
    # O driver JDBC é uma biblioteca que permite que uma aplicação Java se conecte a um banco de dados.
    # Ele atua como um intermediário, traduzindo as chamadas de métodos Java em comandos específicos do banco de dados.

# ===============================

# Dialeto do Hibernate para PostgreSQL

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
    # O Hibernate é uma ferramenta de mapeamento objeto-relacional (ORM) para Java.
    # Ele facilita a interação entre a aplicação Java e o banco de dados, permitindo que
        # você trabalhe com objetos Java em vez de escrever consultas SQL diretamente. O Hibernate
            # converte automaticamente as operações com objetos Java em comandos SQL,
                # gerenciando a persistência dos dados no banco de dados.

                # Alguns exemplos:

                # O Hibernate é uma ferramenta que facilita a interação entre aplicações Java e bancos de dados.
                # Ele faz o mapeamento de classes Java para tabelas no banco, tornando mais simples a persistência de dados.

                # @Entity: Indica que a classe é uma entidade que será mapeada para uma tabela no banco de dados.
                # Exemplo: Uma classe Aluno que representa a tabela de alunos.

                # @Table: Usada para especificar o nome da tabela que a entidade deve mapear.
                # Se não especificado, o Hibernate usará o nome da classe como nome da tabela.

                # @Id: Indica qual campo é a chave primária da tabela.
                # A chave primária é um identificador único para cada linha na tabela.

# ===============================

# Mostrar SQL gerado pelo Hibernate no console
spring.jpa.show-sql=true

# Formatar SQL gerado pelo Hibernate no console
spring.jpa.properties.hibernate.format_sql=true

# Atualizar o esquema do banco de dados automaticamente
spring.jpa.hibernate.ddl-auto=update
# Pode ser 'validate', 'update', 'create', 'create-drop',
    # 'validate' - Valida o esquema do banco de dados, não faz alterações. Apenas verifica se está correto
    # 'update' - Atualiza o esquema do banco de dados, fazendo alterações conforme necessário, mas mantendo os dados existentes.
    # 'create' - Cria o esquema do banco de dados, destruindo os dados existentes. Útil para testes.
    # 'create-drop' - Cria o esquema do banco de dados e o destrói quando a aplicação é encerrada. Útil para testes.