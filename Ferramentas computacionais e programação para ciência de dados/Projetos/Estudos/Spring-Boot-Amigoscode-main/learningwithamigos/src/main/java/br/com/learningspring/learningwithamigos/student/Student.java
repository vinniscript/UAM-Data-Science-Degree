package br.com.learningspring.learningwithamigos.student;

import jakarta.persistence.*;

import java.time.LocalDate;
import java.time.Period;

@Entity // -> Hibernate will create a table in the database with the name of the class (our java).
@Table // -> This annotation is used to indicate the name of the table in the database (our postgres).

public class Student { // This class is a model, it represents the data that will be used in the application.
    @Id // This annotation is used to indicate that this field is the primary key.
    @SequenceGenerator(
            name= "student_sequence", // This is the name of the sequence in our code.
            sequenceName = "student_sequence", // This is the name of the sequence in the database.
            allocationSize = 1
    ) // Will generate a sequence in the database. Garanting that the id will be always unique.
    @GeneratedValue(
            strategy = GenerationType.SEQUENCE,
            generator = "student_sequence"
    ) // This annotation is used to indicate that the id will be generated by the database.

    private Long id;
    private String name;
    private String email;
    private LocalDate dob;
    @Transient // This annotation is used to indicate that this field will not be persisted in the database.
    private Integer age;
    // We can calculate the age based on the dob, there is no need to store it in the database.

//    public Student(Long id) { // Our constructor
//
//    }

    public Student(Long id, // This constructor is used to create a new student.
                   String name,
                   String email,
                   LocalDate dob) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.dob = dob;
    }

    public Student(String name, // A constructor without the id, the database will generate it.
                   String email,
                   LocalDate dob) {
        this.name = name;
        this.email = email;
        this.dob = dob;
    }

    public Student() {

    }

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return Period.between(this.dob, LocalDate.now()).getYears(); // This method calculates the age based on the dob.
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public LocalDate getDob() {
        return dob;
    }

    public void setDob(LocalDate dob) {
        this.dob = dob;
    }

    // toString method, this serves to return the object in a string format. It is useful for debugging.

    @Override
    public String toString() {
        return "Student{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", age=" + age +
                ", email='" + email + '\'' +
                ", dob=" + dob +
                '}';
    }
}
